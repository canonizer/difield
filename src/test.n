using Extran;
using Extran.Nuda.OpenCLLib;
using Extran.Stat.PerfStat;
using Nemerle.Imperative;
using System;
using System.Console;

namespace DiField {
  using Util;

  public module DiFieldTest {
    
    flopsSimple = 20;
    flopsEpsSimple = 28;

    public Main() : void {
      config def n = 10000;
      config def m1 = 500;
      config def r = 10f;
      config def _eps = 0.1f;
      def passEps = 1e-7f;
      def m = m1 * m1;
      def simplePoly = SimplePolygon.regular(n, r);
      def bspPoly = BspPolygon.regular(n, r);
      //def ps = grid2d(m1, r / m1, r / m1);
      def ps = circular2d(m, r * (1 + 0.1f));
      def t0 = deviceTimeOcl.get();
      // compute distance
      def dfsimple = simplePoly.distField(ps);      
      def t1 = deviceTimeOcl.get();
      def dfbsp = bspPoly.distField(ps);      
      def t2 = deviceTimeOcl.get();
      def tsimple = t1 - t0;
      def tbsp = t2 - t1;
      // compare simple and BSP dist fields
      mutable passed = true;
      do(i in m) {
        when(abs(dfsimple[i] - dfbsp[i]) >= passEps) {
          WriteLine($"dfsimple[$i] != dfbsp[$i]: " 
                    + $"$(dfsimple[i]) != $(dfbsp[i])");
          passed = false;
        }
      }  // do(i in m)
      WriteLine("check: " + if(passed) "PASSED" else
                "FAILED");
      //def _perf = gflops([n, m], flopsSimple, tsimple);
      //def perf = gflops([n, m], flopsEpsSimple, t);
      //WriteLine($"time: $t s, performance: $perf gflop/s");
      WriteLine($"size: $n vertices x $m points");
      WriteLine($"all-to-all computation: $tsimple s");
      WriteLine($"HBV computation: $tbsp s");
      WriteLine($"acceleration: $(tsimple / tbsp) times");
    }
  }

}
