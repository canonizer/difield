using Extran;
using Extran.Nuda.OpenCLLib;
using System;
using System.Console;

namespace DiField {
  public module Util {

    public grid2d(m : int, dx : float, dy : float) : array[fvec2] {
      def ps = ondev array(m * m) : array[fvec2];
      nuwork(1, 64) do((iy, ix) in (m, m)) {
        ps[iy * m + ix] = fvec2(ix * dx, iy * dy) - 
        ((m :> float) * 0.5f) * fvec2(dx, dy);
      }
      ps
    }

    /** non-centered grid with specific origin and step vector) */
    public grid2dnc(m : int, step : fvec2, org : fvec2) : array[fvec2] {
      def ps = ondev array(m * m) : array[fvec2];
      def (xstep, ystep) = (step.x, step.y);
      def (xorg, yorg) = (org.x, org.y);
      nuwork(1, 64) do((iy, ix) in (m, m))
        ps[iy * m + ix] = fvec2(xorg, yorg) + fvec2(ix * xstep, iy * ystep);
      ps
    }  // grid2dnc()

    /** produces grid, but places tiles of (mt * mt) in size successively in
    memory */
    public gridTiled2d(m : int, mt : int, dx : float, dy : float) : array[fvec2] {
      def ps = ondev array(m * m) : array[fvec2];
      nuwork(1, 64) do((iy, ix) in (m, m)) {
        def it = ((iy / mt) * (m / mt) + (ix / mt)) * mt * mt + 
          (iy % mt * mt + ix % mt);
        ps[it] = fvec2(ix * dx, iy * dy) - ((m :> float) * 0.5f) * fvec2(dx, dy);
      }
      ps
    }

    // places points on a circle
    public circular2d(m : int, r : float) : array[fvec2] {
      def ps = ondev array(m) : array[fvec2];
      def delta = ((2 * Math.PI) :> float) / m;
      nuwork(64) do(i in m) {
        ps[i] = r * fvec2(cos(i * delta), sin(i * delta));
      }
      ps
    }

  }  // Util
}  // ns
