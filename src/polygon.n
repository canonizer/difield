using Extran;
using Extran.Nuda.OpenCLLib;
using Extran.Stat.PerfStat;
using Nemerle.Imperative;
using System;
using System.Console;

namespace DiField {

  using fvec2;

  /** polygon edge */
  public struct edge2 {
    
    /** creates edge from vertices, */
    public nucode this(a : fvec2, b : fvec2) {
      this.a = a;
      ta = 0f;
      k = nmz(b - a);
      tb = dot(k, b - a);
    }

    /** edge-to-point distance squared, including vertices */
    // 16 flop
    public static nucode dist2(e : edge2, v : fvec2) : float {
      def tv = clamp(dot(e.k, v - e.a), e.ta, e.tb);
      dist2(v, e.a + e.k * tv)
    }
    /** edge-to-edge distance, including vertices */
    // 20 flop
    public static nucode dist(e : edge2, v : fvec2) : float {
      sqrt(dist2(e, v))
    }

    /** edge-vicinity-to-point distance nearest point is at "lateral" sides of
    edge (not "vertex" sides), +inf otherwise*/
    // 15 flop
    public static nucode distEps(e : edge2, v : fvec2, eps : float) : float {
      def tv = clamp(dot(e.k, v - e.a), e.ta, e.tb);
      def d = dist(v, e.a + e.k * tv);
      max(d - eps, e.ta)
    }
    /** first vertex of the edge */
    public a : fvec2;
    /** edge direction */
    public k : fvec2;
    /** must be 0 */
    public ta : float;
    /** distance between b and a */
    public tb : float;
  }

  /** interface for an abstract polygon */
  public abstract class Polygon {

    /** computes distance field to the polygon */
    public abstract distField(ps : array[fvec2]) : array[float];

    /** computes distance field to eps-vicinity of the polygon */
    public abstract distFieldEps(ps : array[fvec2], eps : float) : 
    array[float];

    /** computes quantile distance field to the polygon. That is, 
      (floor(perc * n))-th smallest distance to point */
    public abstract distQuantileField(ps : array[fvec2], perc : float) 
    : array[float];

    /** generates vertices for a regular polygon */
    public static regularVs(n : int, r : float, org : fvec2) 
    : array[fvec2] {
      def vs = array(n) : array[fvec2];
      def alpha = (2 * Math.PI / n) :> float;
      def (xorg, yorg) = (org.x, org.y);
      nuwork(64) do(i in n) {
        vs[i] = fvec2(xorg, yorg) + 
        fvec2(cos(i * alpha), -sin(i * alpha)) * r;
      }
      vs
    }

  }  // class Polygon

} // ns
