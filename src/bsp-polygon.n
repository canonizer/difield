using Extran;
using Extran.Nuda.OpenCLLib;
using Extran.Stat.PerfStat;
using Nemerle.Imperative;
using System;
using System.Console;
using System.Collections.Generic;

namespace DiField {

  using fvec2;
  using edge2;

  /** a 2d axis-aligned rectangle */
  public struct rect2 {
    /** initialize a rectange */
    public nucode this(a : fvec2, b : fvec2) {
      this.a = a;
      this.b = b;
    }
    public static nucode cohull(p : rect2, q : rect2) : rect2 {
      rect2(min(p.a, q.a), max(p.b, q.b))
    }
    /** square of distance from rectangle to point, 0 if point is inside a
  rectangle */
    // 11 flop
    public static nucode dist2(r : rect2, p : fvec2) : float {
      len2(max(fvec2(0f), max(r.a - p, p - r.b)))
    }
    /** square distance to nearest point of rectangle, same as dist2() */
    // 11 flop
    public static nucode nearDist2(r : rect2, p : fvec2) : float {
      dist2(r, p)
    }
    /** square distance to farthest point of rectangle */
    // 15 flop
    public static nucode farDist2(r : rect2, p : fvec2) : float {
      def dxa = p.x - r.a.x; def dxb = p.x - r.b.x;
      def dya = p.y - r.a.y; def dyb = p.y - r.b.y;
      def d2xa = dxa * dxa; def d2xb = dxb * dxb;
      def d2ya = dya * dya; def d2yb = dyb * dyb;
      def d2a = d2xa + d2ya; def d2b = d2xb + d2yb;
      def d2c = d2xa + d2yb; def d2d = d2xb + d2ya;
      max(max(d2a, d2b), max(d2c, d2d))
    }
    // 15 flop
    public static nucode dist(r : rect2, p : fvec2) : float {
      sqrt(dist2(r, p))
    }
    /** distance to epsilon-vicinity of the rectangle */
    // 17 flop
    public static nucode distEps(r : rect2, p : fvec2, eps : float) : float {
      max(dist(r, p), eps) - eps
    }
    /** checks whether rectangle contains a point */
    public contains(p : fvec2) : bool {
      a.x <= p.x && p.x <= b.x && a.y <= p.y && p.y <= b.y
    }
    /** checks whether a rectangle contains any vertex of the edge */
    public aboutInters(u : fvec2, v : fvec2) : bool {
      // false if separated by lines passing through one of the rectangle's edge
      // BEWARE: this works only due to some incorrect optimization 
      // which makes it work correctly
      /*def c1 = u.x > a.x && v.x > a.x;
      def c2 = u.x < b.x && v.x < b.x;
      def c3 = u.y > a.y && v.y > a.y;
      def c4 = u.y < b.y && v.y < b.y;*/
      // these comparisons are correct, but they somehow don't work
      /*
      def c1 = u.x < a.x && v.x < a.x;
      def c2 = u.x > b.x && v.x > b.x;
      def c3 = u.y < a.y && v.y < a.y;
      def c4 = u.y > b.y && v.y > b.y;
       */
      /*def res = if(contains(u) || contains(v)) true else {
        def n = orthccw(v - u);
        def tu = dot(n, u);
        def (ta, tb, tc, td) = (dot(n, a), dot(n, b), dot(n, fvec2(a.x, b.y)),
                                dot(n, fvec2(a.y, b.x)));
        def tmin = min(min(ta, tb), min(tc, td));
        def tmax = max(max(ta, tb), max(tc, td));
        def r1 = tmin <= tu && tu <= tmax;
        r1
        // false if separated by a line passing through two vertices
      };
      //WriteLine(res);
      res*/
      contains(u) || contains(v)
    }
    /** splits a rectangle along the axis */
    public split
    (left : out rect2, right : out rect2, axis : int, split : float) : void {
      left = rect2(a, b.withCoord(axis, split));
      right = rect2(a.withCoord(axis, split), b);
    }
    /** lower coordinates */
    public a : fvec2;
    /** upper coordinates */
    public b : fvec2;
  }  // rect2
  using rect2;

  /** 2d kd-tree node */
  public struct kdnode2 {
    /** create a new kdtree node */
    this
    (parent : int, rect : rect2, left : int, right : int, eind : int, elen : int) {
      this.rect = rect;
      this.left = left;
      this.right = right;
      this.eind = eind;
      this.elen = elen;
      this.parent = parent;
      this._dummy = 0;
     }
    /** creates a leaf node */
    public static leaf(parent : int, rect : rect2, eind : int, elen : int) : kdnode2 {
      kdnode2(parent, rect, 0, 0, eind, elen)
    }
    /** creates an inner node */
    public static inner
    (parent : int, rect : rect2, left : int, right : int, elen : int) : kdnode2 {
      kdnode2(parent, rect, left, right, 0, elen)
    }
    /** square of distance to kd tree node */
    public static nucode dist2(node : kdnode2, p : fvec2) : float {
      dist2(node.rect, p)
    }
    /** square distance to nearest point in kd tree node, same as dist2() */
    public static nucode nearDist2(node : kdnode2, p : fvec2) : float {
      nearDist2(node.rect, p)
    }
    /** square distance to farthest point in kd tree node */
    public static nucode farDist2(node : kdnode2, p : fvec2) : float {
      farDist2(node.rect, p)
    }
    /** distance to kd tree node */
    public static nucode dist(node : kdnode2, p : fvec2) : float {
      dist(node.rect, p)
    }
    /** distance to epsilon-vicinity of kd-tree node */
    public static nucode distEps(node : kdnode2, p : fvec2, eps : float) 
    : float {
      distEps(node.rect, p, eps)
    }
    /** associated rectangle (to compute distance)  */
    public mutable rect : rect2;
    /** left and right subtrees, 0 if none */
    public left : int;
    public right : int;
    /** index into  */
    public eind : int;
    public elen : int;
    /** index of parent node */
    public parent : int;
    /** NVidia CUDA 4.0 OpenCL crashes without this field */
    public _dummy : int;
  } // kdnode2
  using kdnode2;

  /** simple polygon */
  public class BspPolygon : SimplePolygon {

    /** new polygon from vertices */
    public this(vs : array[fvec2]) {
      base(vs);
      buildTree();
    }

    /** builds a BSP tree for the polygon */
    buildTree() : void {

      // find bounding box for all vertices
      mutable boxa = vs[0];
      mutable boxb = vs[0];
      do(i in n) {
        boxa = min(boxa, vs[i]);
        boxb = max(boxb, vs[i]);
      }
      def eps = 1e-6f;
      def box = rect2(boxa - fvec2(eps, eps), boxb + fvec2(eps, eps));

      // list of indices for all edges
      def allEinds = List();
      do(i in n)
        allEinds.Add(i);      

      // dummy node
      lkdnodes.Add(kdnode2());
      // build root
      def _iroot = buildNode(0, allEinds, box, 0, 0);

      // copy to fixed-length arrays
      einds = leinds.ToArray();
      kdnodes = lkdnodes.ToArray();
      es1 = les1.ToArray();
      def _rect = recomputeVolumes(1);
      leinds = null;
      lkdnodes = null;
      les1 = null;
    }  // buildTree()

    /** builds a single node of the tree 
      @param parent index of parent node
      @param vinds vertex indices
      @param einds edge indices
      @param rect rectangle of the node 
      @param tdepth depth of the node to build
      @param axis axis along which to split, 0 for X and 1 for Y
     */
    buildNode
    (parent : int, einds : List[int], rect : rect2, tdepth : int, axis : int) : int {
      // no node if empty when(einds.Count == 0) throw Exception();
      /*WriteLine(string(' ', tdepth) + 
                $"[$(rect.a.x), $(rect.b.x)] X, " + 
                $"[$(rect.a.y), $(rect.b.y)], " + 
                $"nes = $(einds.Count)");*/
      // reserve place for node
      def nind = lkdnodes.Count;
      lkdnodes.Add(kdnode2());
      mutable node;
      
      // check if leaf is to be allocated
      mutable buildLeaf = false;
      def count = einds.Count;
      if(count <= stopElements)
         buildLeaf = true;
       else when(tdepth >= maxTreeDepth)
         buildLeaf = true;
       
       // try to split to see whether to build a leaf
       def leftEinds = List(); def rightEinds = List();
       def split = ((rect.a + rect.b) / 2)[axis];
       mutable leftRect; mutable rightRect;
       rect.split(out leftRect, out rightRect, axis, split);
       unless(buildLeaf) {
         // sort edges to right and left
         foreach(ie in einds) {
           def inLeft = leftRect.aboutInters(vs[ie], vs[(ie + 1) % n]);
           def inRight = rightRect.aboutInters(vs[ie], vs[(ie + 1) % n]);
           def addToLeft = inLeft && (!inRight || ie % 2 == 0);
           def addToRight = inRight && (!inLeft || ie % 2 == 1);
           when(addToLeft)
             leftEinds.Add(ie);
           when(addToRight)
             rightEinds.Add(ie);
         }         
         def leftCount = leftEinds.Count;
         def rightCount = rightEinds.Count;
         if(leftCount == 0 || rightCount == 0) 
           buildLeaf = true;
         else when(leftCount + rightCount >= (overheadFactor * count) :> int)
           buildLeaf = true;
       }
       
       if(buildLeaf) {
         // build a leaf
         def eind = leinds.Count;
         def elen = einds.Count;
         foreach(ei in einds) {
           leinds.Add(ei);
           les1.Add(es[ei]);
         }
         node = kdnode2.leaf(parent, rect, eind, elen);
       } else {
         // split recursively
         def leftInd = buildNode
           (nind, leftEinds, leftRect, tdepth + 1, (axis + 1) % 2);
         def rightInd = buildNode
           (nind, rightEinds, rightRect, tdepth + 1, (axis + 1) % 2);
         node = kdnode2.inner(parent, rect, leftInd, rightInd, einds.Count);
       }
       lkdnodes[nind] = node;
       nind
    }  // buildNode()

    /** recompute node volumes */
    recomputeVolumes(nind : int) : rect2 {
      def node = kdnodes[nind];
      if(node.left == 0) {
        // leaf
        def (eind, elen) = (kdnodes[nind].eind, kdnodes[nind].elen);
        mutable bboxa = vs[leinds[eind]];
        mutable bboxb = vs[leinds[eind]];
        do(ei in eind <> eind + elen - 1) {
          bboxa = min(bboxa, vs[leinds[ei]]);
          bboxa = min(bboxa, vs[(leinds[ei] + 1) % n]);
          bboxb = max(bboxb, vs[leinds[ei]]);
          bboxb = max(bboxb, vs[(leinds[ei] + 1) % n]);
        }
        kdnodes[nind].rect = rect2(bboxa, bboxb);
      } else {
        // inner
        def left = kdnodes[nind].left;
        def right = kdnodes[nind].right;
        kdnodes[nind].rect = cohull
        (recomputeVolumes(left), recomputeVolumes(right));         
      }
      kdnodes[nind].rect
    }

    /** new regular polygon */
    public static new regular(n : int, r : float) : BspPolygon {
      BspPolygon(regularVs(n, r));
    }

    /** compute distance field */
    public override distField(ps : array[fvec2]) : array[float] {
      def m = ps.Length;
      def df = ondev array(m) : array[float];
      nuwork(128) do(i in m) {
        def p = ps[i];
        mutable inode = 1;
        mutable iprev = 0;
        // max distance so far
        mutable d2 = 1e38f;
        while(inode > 0) {
          def node = kdnodes[inode];
          def d2node = dist2(node, p);
          mutable pop = false;
          if(d2node > d2) {
            pop = true;       
          } else if(node.left == 0) {
            // leaf
            // distance to all edges
            do(ei in node.eind <> node.eind + node.elen - 1) {
              mutable ed2 = dist2(es1[ei], p);
              d2 = min(d2, ed2);
            }
            pop = true;
          } else {
            // inner - note that BOTH nodes are non-zero
            def ldist2 = dist2(kdnodes[node.left], p);
            def rdist2 = dist2(kdnodes[node.right], p);
            def inear = if(ldist2 < rdist2) node.left else
              node.right;
            def ifar = if(inear == node.left) node.right else
              node.left;
            if(iprev == ifar) {
              pop = true;
            } else if(iprev == inear) {
              iprev = inode;
              inode = ifar;
            } else {
              iprev = inode;
              inode = inear;
            }
          }  // if(leaf-inner)
          // check if pop
          when(pop) {
            iprev = inode; 
            inode = node.parent;
          }
        }  // while(stack not empty)
        df[i] = sqrt(d2);
      }  // do(each point)
      df      
    }  // distField()

    /** computes distance field to epsilon-vicinity of the polygon */
    public override distFieldEps(ps : array[fvec2], eps : float) 
    : array[float] {
      def m = ps.Length;
      def df = ondev array(m) : array[float];
      nuwork(256) do(i in m) {
        def p = ps[i];
        mutable inode = 1;
        mutable iprev = 0;
        // max distance so far
        mutable d = 1e38f;
        while(inode > 0) {
          def node = kdnodes[inode];
          mutable pop = false;
          if(distEps(node, p, eps) > d) {
            pop = true;       
          } else if(node.left == 0) {
            // leaf
            // distance to all edges
            do(ei in node.eind <> node.eind + node.elen - 1)
              d = min(d, distEps(es1[ei], p, eps));            
            pop = true;
          } else {
            // inner - note that BOTH nodes are non-zero
            def ldist = distEps(kdnodes[node.left], p, eps);
            def rdist = distEps(kdnodes[node.right], p, eps);
            def inear = if(ldist < rdist) node.left else
              node.right;
            def ifar = if(inear == node.left) node.right else
              node.left;
            if(iprev == ifar) {
              pop = true;
            } else if(iprev == inear) {
              iprev = inode;
              inode = ifar;
            } else {
              iprev = inode;
              inode = inear;
            }
          }  // if(leaf-inner)
          // check if pop
          when(pop) {
            iprev = inode; 
            inode = node.parent;
          }
        }  // while(stack not empty)
        df[i] = d;
      }  // do(each point)
      df      
    }  // distFieldEps()

    public override distQuantileField(ps : array[fvec2], perc : float) 
    : array[float] {
      // number of quantile element starting from 1
      def k = (floor(perc * n) :> int) + 1;
      // precision for quantile estimation
      def eps = 1e-6f;
      def m = ps.Length;
      def qf = ondev array(m) : array[float];      
      nuwork(128) do(i in m) {
        def p = ps[i];
        mutable d2min = 0f; mutable d2max = farDist2(kdnodes[1], p); 
        mutable d2mid = 0.5f * (d2min + d2max);
        mutable nmin = 0; mutable nmax = kdnodes[1].elen; mutable nmid = k;
        // index of starting node, root by default
        mutable istart = 1; mutable istartPrev = 0;
        mutable ninner = 0;
        while(nmax > k) {      
          d2mid = if(k > nmin) 
            d2min + (d2max - d2min) * (k + 1 - nmin) / (nmax - nmin)
          else
            0.5f * (d2min + d2max);
          when(d2mid == d2max || d2mid == d2min)
            break;

          // find the new istart; this is the first node, starting from previous 
          // istart, where 
          /*while(true) {
            def node = kdnodes[istart];
            // break on leaf
            when(node.left == 0)
              break;
            def leftNode = kdnodes[node.left];
            def rightNode = kdnodes[node.right];
            def intersLeft = nearDist2(leftNode, p) < d2max &&
              farDist2(leftNode, p) >= d2min;
            def intersRight = nearDist2(rightNode, p) < d2max &&
              farDist2(rightNode, p) >= d2min;
            when(intersLeft && intersRight) 
              break;
            def istartNext = if(intersLeft) node.left else
              node.right;
            def iother = if(intersLeft) node.right else 
              node.left;
            def otherNode = kdnodes[iother];
            when(farDist2(otherNode, p) < d2min)
              ninner += otherNode.elen;
            istartPrev = istart; 
            istart = istartNext;
          }  // while(not leaf)
           */
          mutable inode = istart; mutable iprev = 0;
          nmid = ninner;
          // count the total number of edges to which distance is strictly less
          // than d2mid
          while(inode > istartPrev) {
            mutable popup = false;
            def node = kdnodes[inode];
            if(farDist2(node, p) < d2mid) {
              // node falls fully inside d2mid
              nmid += node.elen;
              popup = true;
            } else if(nearDist2(node, p) >= d2mid) {
              // node falls completely outside d2mid, so cull
              popup = true;
            } else if(node.left == 0) {
              // leaf, check each edge individually
              do(ie in node.eind <> node.eind + node.elen - 1) {
                when(dist2(es1[ie], p) < d2mid)              
                  nmid++;
              }
              popup = true;
            } else {
              // inner node, fixed left-to-right traversal order
              if(iprev == node.right) {
                // done with this subtree
                popup = true;
              } else if(iprev == node.left) {
                // done with left, descend to right
                iprev = inode;
                inode = node.right;
              } else {
                // first time here, descend left
                iprev = inode;
                inode = node.left;
              }
            } // if
            when(popup) {
              iprev = inode;
              inode = node.parent;
            }  // when(popup)
          }  // while(nodes)
          // check distance
          if(nmid < k) {
            d2min = d2mid;
            nmin = nmid;
          } else {
            d2max = d2mid;
            nmax = nmid;
          }
        }  // while(distance difference > eps)

        // find maximum distance to edge within d2max
        mutable ed2 = 0f;
        mutable inode = istart; mutable iprev = 0;
        while(inode > istartPrev) {
          def node = kdnodes[inode];
          def popup = farDist2(node, p) <= d2min || 
            nearDist2(node, p) > d2max || node.left == 0 || 
            (node.left != 0 && iprev == node.right);
          if(node.left == 0) {
            // leaf, compute max distance
            do(ie in (node.eind <> node.eind + node.elen - 1)) {
              def d2 = dist2(es1[ie], p);
              when(d2 < d2max)
                ed2 = max(ed2, d2);
            }  // do(edge)
          } else when(!popup) {
            // inner, choose left/right
            when(iprev != node.right) {
              def inext = if(iprev == node.left) node.right else
                node.left;
              iprev = inode;
              inode = inext;
            } // when()
          }  // if(leaf-inner)
          when(popup) {
            iprev = inode;
            inode = node.parent;
          }
        }  // while(inode)
        qf[i] = sqrt(ed2);
      }  // nuwork() do(i)
      /*do(i in m) {
        WriteLine($"ks[$i] = $(ks[i])");
      }*/
      qf
    }  // distQuantile()

    /** maximum BSP tree depth */
    static maxTreeDepth = 20;
    /** combined number of vertices and edges in a leaf when we can stop */
    mutable static config stopElements = 8;
    /** maximum overhead factor */
    mutable static config overheadFactor = 1.2;

    /** nodes of kdtree, root is node 1*/
    mutable kdnodes : array[kdnode2];
    /** edge indices for nodes*/
    mutable einds : array[int];
    /** edges for nodes */
    mutable es1 : array[edge2];

    /** variable-length versions of arrays above, used only during construction
    */
    mutable lkdnodes : List[kdnode2] = List();
    mutable lvinds : List[int] = List();
    mutable leinds : List[int] = List();
    mutable lvs1 : List[fvec2] = List();
    mutable les1 : List[edge2] = List();
    
  }  // class SimplePolygon

}  // ns
