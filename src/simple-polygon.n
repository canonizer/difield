using Extran;
using Extran.Nuda.OpenCLLib;
using Extran.Stat.PerfStat;
using Nemerle.Imperative;
using System;
using System.Console;

namespace DiField {

  using fvec2;
  using edge2;

  /** simple polygon */
  public class SimplePolygon : Polygon {
    /** new polygon from vertices */
    public this(vs : array[fvec2]) {
      n = vs.Length;
      def n = vs.Length;
      this.vs = vs;
      // init edges
      es = array(n);
      nuwork(64) do(i in n) es[i] = edge2(vs[i], vs[(i + 1) % n]);
    }
    /** new regular polygon */
    public static regular(n : int, r : float, org : fvec2) 
    : SimplePolygon {
      SimplePolygon(regularVs(n, r, org));
    }

    public override distField(ps : array[fvec2]) : array[float] {
      // TODO: avoid extra copying of ps's initial part
      def m = ps.Length;
      def n1 = n;
      def df = ondev array(m) : array[float];
      // Intel CPU (Core 2 Duo, 2.2 GHz, 35,2 gflop/s peak):
      // nuwork(128) - 1.45 gflop/s
      // ATI HD 5830: nuwork(128) - 122 gflop/s
      // nuwork(128) dmine(10) - 540 gflop/s
      // NVidia: nuwork(128) dmine(4), unroll(2) inner - 569 gflop/s
      nuwork(128) dmine(10) do(i in m) {
        def p = ps[i];
        mutable d2 = 1e38f;
        do(j in n1)
          d2 = min(d2, dist2(es[j], p));
        df[i] = sqrt(d2);
      }  // nuwork do
      df
    }  // distField()

    public override distFieldEps(ps : array[fvec2], eps : float) 
    : array[float] {
      def m = ps.Length;
      def n1 = n;
      def df = ondev array(m) : array[float];
      // ATI HD 5830: 
      // nuwork(128) - 145 gflop/s
      // nuwork(64) dmine(8), unroll(2) inner - 560 gflop/s
      // NVidia:
      // nuwork(256) - 320 gflop/s
      // nuwork(128) dmine(8), unroll(2) inner - 460 gflop/s
      nuwork(64) dmine(8) do(i in m) {
        def p = ps[i];
        mutable ed = 1e38f;
        unroll(2) do(j in n1)
          ed = min(ed, distEps(es[j], p, eps));   
        df[i] = ed;
      }  // nuwork do
      df
    }  // distFieldEps()

    public override distQuantileField(_ps : array[fvec2], _perc : float) 
    : array[float] {
      throw NotImplementedException();
    }
    
    /** number of vertices/edges in the polygon */
    protected mutable n : int;
    /** polygon vertices */
    protected vs : array[fvec2];
    /** polygon edges */
    protected es : array[edge2];
  }  // class SimplePolygon

}  // ns
