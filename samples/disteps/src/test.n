using Extran;
using Extran.Nuda.OpenCLLib;
using Extran.Stat.PerfStat;
using Nemerle.Imperative;
using System;
using System.Console;

using DiField;

namespace DiFieldTest {

  public module DiFieldTest {
    
    flopsSimpleEps = 21;

    public Main() : void {
      config def n = 10000;
      config def m1 = 512;
      config def r = 10f;
      config def eps = 0.1f;
      def passEps = 1e-7f;
      def m = m1 * m1;
      def simplePoly = SimplePolygon.regular(n, r, fvec2(0, 0));
      def bspPoly = BspPolygon.regular(n, r, fvec2(0, 0));
      def ps = Util.circular2d(m, r * (1 - 0.05f));
      def t0 = deviceTimeOcl.get();
      // compute distance
      def dfsimple = simplePoly.distFieldEps(ps, eps);
      def t1 = deviceTimeOcl.get();
      def dfbsp = bspPoly.distFieldEps(ps, eps);
      def t2 = deviceTimeOcl.get();
      def tsimple = t1 - t0;
      def tbsp = t2 - t1;
      // compare simple and BSP dist fields
      mutable passed = true;
      do(i in m) {
        when(abs(dfsimple[i] - dfbsp[i]) >= passEps) {
          WriteLine($"dfsimple[$i] != dfbsp[$i]: " 
                    + $"$(dfsimple[i]) != $(dfbsp[i])");
          passed = false;
          break;
        }
      }  // do(i in m)
      WriteLine("check: " + if(passed) "PASSED" else
                "FAILED");
      def perf = gflops([n, m], flopsSimpleEps, tsimple);
      WriteLine($"size: $n vertices x $m points");
      WriteLine($"time: $tsimple s, performance: $perf gflop/s");      
      WriteLine($"all-to-all computation: $tsimple s");
      WriteLine($"HBV computation: $tbsp s");
      WriteLine($"acceleration: $(tsimple / tbsp) times");
    }
  }
}
